Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOT

Grammar

Rule 0     S' -> Simulation
Rule 1     Simulation -> LT SIMULATION GT M A A R Program LT DIV SIMULATION GT
Rule 2     R -> ROUNDS EQ NUMERIC SEMICOLOM
Rule 3     M -> LT MAP GT MapDetail LT DIV MAP GT
Rule 4     MapDetail -> ROW EQ NUMERIC SEMICOLOM MapDetail
Rule 5     MapDetail -> COL EQ NUMERIC SEMICOLOM MapDetail
Rule 6     MapDetail -> empty
Rule 7     A -> LT ARMY GT ArmyDetail LT DIV ARMY GT
Rule 8     ArmyDetail -> ARMY_name EQ NUMERIC SEMICOLOM ArmyDetail
Rule 9     ArmyDetail -> AMOUNT EQ NUMERIC SEMICOLOM ArmyDetail
Rule 10    ArmyDetail -> empty
Rule 11    Program -> Declaration_aster
Rule 12    Declaration -> FuncDecl
Rule 13    Declaration -> VarDecl
Rule 14    Declaration -> Statement
Rule 15    VarDecl -> Type_ ID EQ Expression SEMICOLOM
Rule 16    Statement -> ExprStmt
Rule 17    Statement -> WhileStmt
Rule 18    Statement -> IfStmt
Rule 19    Statement -> PrintStmt
Rule 20    Statement -> ReturnStmt
Rule 21    Statement -> Block
Rule 22    Block -> OKEY Declaration_aster CKEY
Rule 23    Declaration_aster -> Declaration Declaration_aster
Rule 24    Declaration_aster -> empty
Rule 25    ExprStmt -> Expression SEMICOLOM
Rule 26    IfStmt -> IF OPP Expression CLP Statement Else_aster
Rule 27    Else_aster -> ELSE Statement
Rule 28    Else_aster -> empty
Rule 29    PrintStmt -> PRINT Expression SEMICOLOM
Rule 30    ReturnStmt -> RETURN Expression SEMICOLOM
Rule 31    WhileStmt -> WHILE OPP Expression CLP Statement
Rule 32    Expression -> Assignment
Rule 33    Assignment -> ID EQ Logic_or
Rule 34    Assignment -> Type_ ID EQ Logic_or
Rule 35    Assignment -> Logic_or
Rule 36    Logic_or -> Logic_or OR Logic_and
Rule 37    Logic_or -> Logic_and
Rule 38    Logic_and -> Logic_and AND Equality
Rule 39    Logic_and -> Equality
Rule 40    Equality -> Equality NOTEQ Comparison
Rule 41    Equality -> Equality EQEQ Comparison
Rule 42    Equality -> Comparison
Rule 43    Comparison -> Comparison GT Term
Rule 44    Comparison -> Comparison LT Term
Rule 45    Comparison -> Comparison LTE Term
Rule 46    Comparison -> Comparison GTE Term
Rule 47    Comparison -> Term
Rule 48    Term -> Term MINUS Factor
Rule 49    Term -> Term PLUS Factor
Rule 50    Term -> Factor
Rule 51    Factor -> Factor STAR Unary
Rule 52    Factor -> Factor DIV Unary
Rule 53    Factor -> Unary
Rule 54    Unary -> NOT Unary
Rule 55    Unary -> MINUS Unary
Rule 56    Unary -> Call
Rule 57    Call -> Primary OPP Arguments CLP
Rule 58    Call -> Primary
Rule 59    Arguments -> empty
Rule 60    Primary -> TRUE
Rule 61    Primary -> FALSE
Rule 62    Primary -> NUMERIC
Rule 63    Primary -> NIL
Rule 64    Primary -> ID
Rule 65    Arguments -> Expression Expression_aster
Rule 66    Expression_aster -> COMMA Expression Expression_aster
Rule 67    Expression_aster -> empty
Rule 68    FuncDecl -> FUNC Function
Rule 69    Function -> Type_ ID OPP Params CLP Block
Rule 70    Params -> Type_ ID ParamsAster
Rule 71    Params -> empty
Rule 72    ParamsAster -> COMMA Params ParamsAster
Rule 73    ParamsAster -> empty
Rule 74    Type_ -> INT
Rule 75    Type_ -> BOOL
Rule 76    Type_ -> VOID
Rule 77    empty -> <empty>

Terminals, with rules where they appear

AMOUNT               : 9
AND                  : 38
ARMY                 : 7 7
ARMY_name            : 8
BOOL                 : 75
CKEY                 : 22
CLP                  : 26 31 57 69
COL                  : 5
COMMA                : 66 72
DIV                  : 1 3 7 52
DOT                  : 
ELSE                 : 27
EQ                   : 2 4 5 8 9 15 33 34
EQEQ                 : 41
FALSE                : 61
FUNC                 : 68
GT                   : 1 1 3 3 7 7 43
GTE                  : 46
ID                   : 15 33 34 64 69 70
IF                   : 26
INT                  : 74
LT                   : 1 1 3 3 7 7 44
LTE                  : 45
MAP                  : 3 3
MINUS                : 48 55
NIL                  : 63
NOT                  : 54
NOTEQ                : 40
NUMERIC              : 2 4 5 8 9 62
OKEY                 : 22
OPP                  : 26 31 57 69
OR                   : 36
PLUS                 : 49
PRINT                : 29
RETURN               : 30
ROUNDS               : 2
ROW                  : 4
SEMICOLOM            : 2 4 5 8 9 15 25 29 30
SIMULATION           : 1 1
STAR                 : 51
TRUE                 : 60
VOID                 : 76
WHILE                : 31
error                : 

Nonterminals, with rules where they appear

A                    : 1 1
Arguments            : 57
ArmyDetail           : 7 8 9
Assignment           : 32
Block                : 21 69
Call                 : 56
Comparison           : 40 41 42 43 44 45 46
Declaration          : 23
Declaration_aster    : 11 22 23
Else_aster           : 26
Equality             : 38 39 40 41
ExprStmt             : 16
Expression           : 15 25 26 29 30 31 65 66
Expression_aster     : 65 66
Factor               : 48 49 50 51 52
FuncDecl             : 12
Function             : 68
IfStmt               : 18
Logic_and            : 36 37 38
Logic_or             : 33 34 35 36
M                    : 1
MapDetail            : 3 4 5
Params               : 69 72
ParamsAster          : 70 72
Primary              : 57 58
PrintStmt            : 19
Program              : 1
R                    : 1
ReturnStmt           : 20
Simulation           : 0
Statement            : 14 26 27 31
Term                 : 43 44 45 46 47 48 49
Type_                : 15 34 69 70
Unary                : 51 52 53 54 55
VarDecl              : 13
WhileStmt            : 17
empty                : 6 10 24 28 59 67 71 73

Parsing method: LALR

state 0

    (0) S' -> . Simulation
    (1) Simulation -> . LT SIMULATION GT M A A R Program LT DIV SIMULATION GT

    LT              shift and go to state 2

    Simulation                     shift and go to state 1

state 1

    (0) S' -> Simulation .



state 2

    (1) Simulation -> LT . SIMULATION GT M A A R Program LT DIV SIMULATION GT

    SIMULATION      shift and go to state 3


state 3

    (1) Simulation -> LT SIMULATION . GT M A A R Program LT DIV SIMULATION GT

    GT              shift and go to state 4


state 4

    (1) Simulation -> LT SIMULATION GT . M A A R Program LT DIV SIMULATION GT
    (3) M -> . LT MAP GT MapDetail LT DIV MAP GT

    LT              shift and go to state 5

    M                              shift and go to state 6

state 5

    (3) M -> LT . MAP GT MapDetail LT DIV MAP GT

    MAP             shift and go to state 7


state 6

    (1) Simulation -> LT SIMULATION GT M . A A R Program LT DIV SIMULATION GT
    (7) A -> . LT ARMY GT ArmyDetail LT DIV ARMY GT

    LT              shift and go to state 8

    A                              shift and go to state 9

state 7

    (3) M -> LT MAP . GT MapDetail LT DIV MAP GT

    GT              shift and go to state 10


state 8

    (7) A -> LT . ARMY GT ArmyDetail LT DIV ARMY GT

    ARMY            shift and go to state 11


state 9

    (1) Simulation -> LT SIMULATION GT M A . A R Program LT DIV SIMULATION GT
    (7) A -> . LT ARMY GT ArmyDetail LT DIV ARMY GT

    LT              shift and go to state 8

    A                              shift and go to state 12

state 10

    (3) M -> LT MAP GT . MapDetail LT DIV MAP GT
    (4) MapDetail -> . ROW EQ NUMERIC SEMICOLOM MapDetail
    (5) MapDetail -> . COL EQ NUMERIC SEMICOLOM MapDetail
    (6) MapDetail -> . empty
    (77) empty -> .

    ROW             shift and go to state 14
    COL             shift and go to state 15
    LT              reduce using rule 77 (empty -> .)

    MapDetail                      shift and go to state 13
    empty                          shift and go to state 16

state 11

    (7) A -> LT ARMY . GT ArmyDetail LT DIV ARMY GT

    GT              shift and go to state 17


state 12

    (1) Simulation -> LT SIMULATION GT M A A . R Program LT DIV SIMULATION GT
    (2) R -> . ROUNDS EQ NUMERIC SEMICOLOM

    ROUNDS          shift and go to state 19

    R                              shift and go to state 18

state 13

    (3) M -> LT MAP GT MapDetail . LT DIV MAP GT

    LT              shift and go to state 20


state 14

    (4) MapDetail -> ROW . EQ NUMERIC SEMICOLOM MapDetail

    EQ              shift and go to state 21


state 15

    (5) MapDetail -> COL . EQ NUMERIC SEMICOLOM MapDetail

    EQ              shift and go to state 22


state 16

    (6) MapDetail -> empty .

    LT              reduce using rule 6 (MapDetail -> empty .)


state 17

    (7) A -> LT ARMY GT . ArmyDetail LT DIV ARMY GT
    (8) ArmyDetail -> . ARMY_name EQ NUMERIC SEMICOLOM ArmyDetail
    (9) ArmyDetail -> . AMOUNT EQ NUMERIC SEMICOLOM ArmyDetail
    (10) ArmyDetail -> . empty
    (77) empty -> .

    ARMY_name       shift and go to state 24
    AMOUNT          shift and go to state 25
    LT              reduce using rule 77 (empty -> .)

    ArmyDetail                     shift and go to state 23
    empty                          shift and go to state 26

state 18

    (1) Simulation -> LT SIMULATION GT M A A R . Program LT DIV SIMULATION GT
    (11) Program -> . Declaration_aster
    (23) Declaration_aster -> . Declaration Declaration_aster
    (24) Declaration_aster -> . empty
    (12) Declaration -> . FuncDecl
    (13) Declaration -> . VarDecl
    (14) Declaration -> . Statement
    (77) empty -> .
    (68) FuncDecl -> . FUNC Function
    (15) VarDecl -> . Type_ ID EQ Expression SEMICOLOM
    (16) Statement -> . ExprStmt
    (17) Statement -> . WhileStmt
    (18) Statement -> . IfStmt
    (19) Statement -> . PrintStmt
    (20) Statement -> . ReturnStmt
    (21) Statement -> . Block
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (25) ExprStmt -> . Expression SEMICOLOM
    (31) WhileStmt -> . WHILE OPP Expression CLP Statement
    (26) IfStmt -> . IF OPP Expression CLP Statement Else_aster
    (29) PrintStmt -> . PRINT Expression SEMICOLOM
    (30) ReturnStmt -> . RETURN Expression SEMICOLOM
    (22) Block -> . OKEY Declaration_aster CKEY
    (32) Expression -> . Assignment
    (33) Assignment -> . ID EQ Logic_or
    (34) Assignment -> . Type_ ID EQ Logic_or
    (35) Assignment -> . Logic_or
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    LT              reduce using rule 77 (empty -> .)
    FUNC            shift and go to state 34
    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    WHILE           shift and go to state 47
    IF              shift and go to state 48
    PRINT           shift and go to state 49
    RETURN          shift and go to state 50
    OKEY            shift and go to state 51
    ID              shift and go to state 36
    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67

    Program                        shift and go to state 27
    Declaration_aster              shift and go to state 28
    Declaration                    shift and go to state 29
    empty                          shift and go to state 30
    FuncDecl                       shift and go to state 31
    VarDecl                        shift and go to state 32
    Statement                      shift and go to state 33
    Type_                          shift and go to state 35
    Expression                     shift and go to state 37
    ExprStmt                       shift and go to state 38
    WhileStmt                      shift and go to state 39
    IfStmt                         shift and go to state 40
    PrintStmt                      shift and go to state 41
    ReturnStmt                     shift and go to state 42
    Block                          shift and go to state 43
    Assignment                     shift and go to state 52
    Logic_or                       shift and go to state 53
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 19

    (2) R -> ROUNDS . EQ NUMERIC SEMICOLOM

    EQ              shift and go to state 68


state 20

    (3) M -> LT MAP GT MapDetail LT . DIV MAP GT

    DIV             shift and go to state 69


state 21

    (4) MapDetail -> ROW EQ . NUMERIC SEMICOLOM MapDetail

    NUMERIC         shift and go to state 70


state 22

    (5) MapDetail -> COL EQ . NUMERIC SEMICOLOM MapDetail

    NUMERIC         shift and go to state 71


state 23

    (7) A -> LT ARMY GT ArmyDetail . LT DIV ARMY GT

    LT              shift and go to state 72


state 24

    (8) ArmyDetail -> ARMY_name . EQ NUMERIC SEMICOLOM ArmyDetail

    EQ              shift and go to state 73


state 25

    (9) ArmyDetail -> AMOUNT . EQ NUMERIC SEMICOLOM ArmyDetail

    EQ              shift and go to state 74


state 26

    (10) ArmyDetail -> empty .

    LT              reduce using rule 10 (ArmyDetail -> empty .)


state 27

    (1) Simulation -> LT SIMULATION GT M A A R Program . LT DIV SIMULATION GT

    LT              shift and go to state 75


state 28

    (11) Program -> Declaration_aster .

    LT              reduce using rule 11 (Program -> Declaration_aster .)


state 29

    (23) Declaration_aster -> Declaration . Declaration_aster
    (23) Declaration_aster -> . Declaration Declaration_aster
    (24) Declaration_aster -> . empty
    (12) Declaration -> . FuncDecl
    (13) Declaration -> . VarDecl
    (14) Declaration -> . Statement
    (77) empty -> .
    (68) FuncDecl -> . FUNC Function
    (15) VarDecl -> . Type_ ID EQ Expression SEMICOLOM
    (16) Statement -> . ExprStmt
    (17) Statement -> . WhileStmt
    (18) Statement -> . IfStmt
    (19) Statement -> . PrintStmt
    (20) Statement -> . ReturnStmt
    (21) Statement -> . Block
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (25) ExprStmt -> . Expression SEMICOLOM
    (31) WhileStmt -> . WHILE OPP Expression CLP Statement
    (26) IfStmt -> . IF OPP Expression CLP Statement Else_aster
    (29) PrintStmt -> . PRINT Expression SEMICOLOM
    (30) ReturnStmt -> . RETURN Expression SEMICOLOM
    (22) Block -> . OKEY Declaration_aster CKEY
    (32) Expression -> . Assignment
    (33) Assignment -> . ID EQ Logic_or
    (34) Assignment -> . Type_ ID EQ Logic_or
    (35) Assignment -> . Logic_or
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    LT              reduce using rule 77 (empty -> .)
    CKEY            reduce using rule 77 (empty -> .)
    FUNC            shift and go to state 34
    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    WHILE           shift and go to state 47
    IF              shift and go to state 48
    PRINT           shift and go to state 49
    RETURN          shift and go to state 50
    OKEY            shift and go to state 51
    ID              shift and go to state 36
    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67

    Declaration                    shift and go to state 29
    Declaration_aster              shift and go to state 76
    empty                          shift and go to state 30
    FuncDecl                       shift and go to state 31
    VarDecl                        shift and go to state 32
    Statement                      shift and go to state 33
    Type_                          shift and go to state 35
    Expression                     shift and go to state 37
    ExprStmt                       shift and go to state 38
    WhileStmt                      shift and go to state 39
    IfStmt                         shift and go to state 40
    PrintStmt                      shift and go to state 41
    ReturnStmt                     shift and go to state 42
    Block                          shift and go to state 43
    Assignment                     shift and go to state 52
    Logic_or                       shift and go to state 53
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 30

    (24) Declaration_aster -> empty .

    LT              reduce using rule 24 (Declaration_aster -> empty .)
    CKEY            reduce using rule 24 (Declaration_aster -> empty .)


state 31

    (12) Declaration -> FuncDecl .

    FUNC            reduce using rule 12 (Declaration -> FuncDecl .)
    INT             reduce using rule 12 (Declaration -> FuncDecl .)
    BOOL            reduce using rule 12 (Declaration -> FuncDecl .)
    VOID            reduce using rule 12 (Declaration -> FuncDecl .)
    WHILE           reduce using rule 12 (Declaration -> FuncDecl .)
    IF              reduce using rule 12 (Declaration -> FuncDecl .)
    PRINT           reduce using rule 12 (Declaration -> FuncDecl .)
    RETURN          reduce using rule 12 (Declaration -> FuncDecl .)
    OKEY            reduce using rule 12 (Declaration -> FuncDecl .)
    ID              reduce using rule 12 (Declaration -> FuncDecl .)
    NOT             reduce using rule 12 (Declaration -> FuncDecl .)
    MINUS           reduce using rule 12 (Declaration -> FuncDecl .)
    TRUE            reduce using rule 12 (Declaration -> FuncDecl .)
    FALSE           reduce using rule 12 (Declaration -> FuncDecl .)
    NUMERIC         reduce using rule 12 (Declaration -> FuncDecl .)
    NIL             reduce using rule 12 (Declaration -> FuncDecl .)
    LT              reduce using rule 12 (Declaration -> FuncDecl .)
    CKEY            reduce using rule 12 (Declaration -> FuncDecl .)


state 32

    (13) Declaration -> VarDecl .

    FUNC            reduce using rule 13 (Declaration -> VarDecl .)
    INT             reduce using rule 13 (Declaration -> VarDecl .)
    BOOL            reduce using rule 13 (Declaration -> VarDecl .)
    VOID            reduce using rule 13 (Declaration -> VarDecl .)
    WHILE           reduce using rule 13 (Declaration -> VarDecl .)
    IF              reduce using rule 13 (Declaration -> VarDecl .)
    PRINT           reduce using rule 13 (Declaration -> VarDecl .)
    RETURN          reduce using rule 13 (Declaration -> VarDecl .)
    OKEY            reduce using rule 13 (Declaration -> VarDecl .)
    ID              reduce using rule 13 (Declaration -> VarDecl .)
    NOT             reduce using rule 13 (Declaration -> VarDecl .)
    MINUS           reduce using rule 13 (Declaration -> VarDecl .)
    TRUE            reduce using rule 13 (Declaration -> VarDecl .)
    FALSE           reduce using rule 13 (Declaration -> VarDecl .)
    NUMERIC         reduce using rule 13 (Declaration -> VarDecl .)
    NIL             reduce using rule 13 (Declaration -> VarDecl .)
    LT              reduce using rule 13 (Declaration -> VarDecl .)
    CKEY            reduce using rule 13 (Declaration -> VarDecl .)


state 33

    (14) Declaration -> Statement .

    FUNC            reduce using rule 14 (Declaration -> Statement .)
    INT             reduce using rule 14 (Declaration -> Statement .)
    BOOL            reduce using rule 14 (Declaration -> Statement .)
    VOID            reduce using rule 14 (Declaration -> Statement .)
    WHILE           reduce using rule 14 (Declaration -> Statement .)
    IF              reduce using rule 14 (Declaration -> Statement .)
    PRINT           reduce using rule 14 (Declaration -> Statement .)
    RETURN          reduce using rule 14 (Declaration -> Statement .)
    OKEY            reduce using rule 14 (Declaration -> Statement .)
    ID              reduce using rule 14 (Declaration -> Statement .)
    NOT             reduce using rule 14 (Declaration -> Statement .)
    MINUS           reduce using rule 14 (Declaration -> Statement .)
    TRUE            reduce using rule 14 (Declaration -> Statement .)
    FALSE           reduce using rule 14 (Declaration -> Statement .)
    NUMERIC         reduce using rule 14 (Declaration -> Statement .)
    NIL             reduce using rule 14 (Declaration -> Statement .)
    LT              reduce using rule 14 (Declaration -> Statement .)
    CKEY            reduce using rule 14 (Declaration -> Statement .)


state 34

    (68) FuncDecl -> FUNC . Function
    (69) Function -> . Type_ ID OPP Params CLP Block
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID

    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46

    Function                       shift and go to state 77
    Type_                          shift and go to state 78

state 35

    (15) VarDecl -> Type_ . ID EQ Expression SEMICOLOM
    (34) Assignment -> Type_ . ID EQ Logic_or

    ID              shift and go to state 79


state 36

    (33) Assignment -> ID . EQ Logic_or
    (64) Primary -> ID .

    EQ              shift and go to state 80
    OPP             reduce using rule 64 (Primary -> ID .)
    STAR            reduce using rule 64 (Primary -> ID .)
    DIV             reduce using rule 64 (Primary -> ID .)
    MINUS           reduce using rule 64 (Primary -> ID .)
    PLUS            reduce using rule 64 (Primary -> ID .)
    GT              reduce using rule 64 (Primary -> ID .)
    LT              reduce using rule 64 (Primary -> ID .)
    LTE             reduce using rule 64 (Primary -> ID .)
    GTE             reduce using rule 64 (Primary -> ID .)
    NOTEQ           reduce using rule 64 (Primary -> ID .)
    EQEQ            reduce using rule 64 (Primary -> ID .)
    AND             reduce using rule 64 (Primary -> ID .)
    OR              reduce using rule 64 (Primary -> ID .)
    SEMICOLOM       reduce using rule 64 (Primary -> ID .)
    CLP             reduce using rule 64 (Primary -> ID .)
    COMMA           reduce using rule 64 (Primary -> ID .)


state 37

    (25) ExprStmt -> Expression . SEMICOLOM

    SEMICOLOM       shift and go to state 81


state 38

    (16) Statement -> ExprStmt .

    FUNC            reduce using rule 16 (Statement -> ExprStmt .)
    INT             reduce using rule 16 (Statement -> ExprStmt .)
    BOOL            reduce using rule 16 (Statement -> ExprStmt .)
    VOID            reduce using rule 16 (Statement -> ExprStmt .)
    WHILE           reduce using rule 16 (Statement -> ExprStmt .)
    IF              reduce using rule 16 (Statement -> ExprStmt .)
    PRINT           reduce using rule 16 (Statement -> ExprStmt .)
    RETURN          reduce using rule 16 (Statement -> ExprStmt .)
    OKEY            reduce using rule 16 (Statement -> ExprStmt .)
    ID              reduce using rule 16 (Statement -> ExprStmt .)
    NOT             reduce using rule 16 (Statement -> ExprStmt .)
    MINUS           reduce using rule 16 (Statement -> ExprStmt .)
    TRUE            reduce using rule 16 (Statement -> ExprStmt .)
    FALSE           reduce using rule 16 (Statement -> ExprStmt .)
    NUMERIC         reduce using rule 16 (Statement -> ExprStmt .)
    NIL             reduce using rule 16 (Statement -> ExprStmt .)
    LT              reduce using rule 16 (Statement -> ExprStmt .)
    CKEY            reduce using rule 16 (Statement -> ExprStmt .)
    ELSE            reduce using rule 16 (Statement -> ExprStmt .)


state 39

    (17) Statement -> WhileStmt .

    FUNC            reduce using rule 17 (Statement -> WhileStmt .)
    INT             reduce using rule 17 (Statement -> WhileStmt .)
    BOOL            reduce using rule 17 (Statement -> WhileStmt .)
    VOID            reduce using rule 17 (Statement -> WhileStmt .)
    WHILE           reduce using rule 17 (Statement -> WhileStmt .)
    IF              reduce using rule 17 (Statement -> WhileStmt .)
    PRINT           reduce using rule 17 (Statement -> WhileStmt .)
    RETURN          reduce using rule 17 (Statement -> WhileStmt .)
    OKEY            reduce using rule 17 (Statement -> WhileStmt .)
    ID              reduce using rule 17 (Statement -> WhileStmt .)
    NOT             reduce using rule 17 (Statement -> WhileStmt .)
    MINUS           reduce using rule 17 (Statement -> WhileStmt .)
    TRUE            reduce using rule 17 (Statement -> WhileStmt .)
    FALSE           reduce using rule 17 (Statement -> WhileStmt .)
    NUMERIC         reduce using rule 17 (Statement -> WhileStmt .)
    NIL             reduce using rule 17 (Statement -> WhileStmt .)
    LT              reduce using rule 17 (Statement -> WhileStmt .)
    CKEY            reduce using rule 17 (Statement -> WhileStmt .)
    ELSE            reduce using rule 17 (Statement -> WhileStmt .)


state 40

    (18) Statement -> IfStmt .

    FUNC            reduce using rule 18 (Statement -> IfStmt .)
    INT             reduce using rule 18 (Statement -> IfStmt .)
    BOOL            reduce using rule 18 (Statement -> IfStmt .)
    VOID            reduce using rule 18 (Statement -> IfStmt .)
    WHILE           reduce using rule 18 (Statement -> IfStmt .)
    IF              reduce using rule 18 (Statement -> IfStmt .)
    PRINT           reduce using rule 18 (Statement -> IfStmt .)
    RETURN          reduce using rule 18 (Statement -> IfStmt .)
    OKEY            reduce using rule 18 (Statement -> IfStmt .)
    ID              reduce using rule 18 (Statement -> IfStmt .)
    NOT             reduce using rule 18 (Statement -> IfStmt .)
    MINUS           reduce using rule 18 (Statement -> IfStmt .)
    TRUE            reduce using rule 18 (Statement -> IfStmt .)
    FALSE           reduce using rule 18 (Statement -> IfStmt .)
    NUMERIC         reduce using rule 18 (Statement -> IfStmt .)
    NIL             reduce using rule 18 (Statement -> IfStmt .)
    LT              reduce using rule 18 (Statement -> IfStmt .)
    CKEY            reduce using rule 18 (Statement -> IfStmt .)
    ELSE            reduce using rule 18 (Statement -> IfStmt .)


state 41

    (19) Statement -> PrintStmt .

    FUNC            reduce using rule 19 (Statement -> PrintStmt .)
    INT             reduce using rule 19 (Statement -> PrintStmt .)
    BOOL            reduce using rule 19 (Statement -> PrintStmt .)
    VOID            reduce using rule 19 (Statement -> PrintStmt .)
    WHILE           reduce using rule 19 (Statement -> PrintStmt .)
    IF              reduce using rule 19 (Statement -> PrintStmt .)
    PRINT           reduce using rule 19 (Statement -> PrintStmt .)
    RETURN          reduce using rule 19 (Statement -> PrintStmt .)
    OKEY            reduce using rule 19 (Statement -> PrintStmt .)
    ID              reduce using rule 19 (Statement -> PrintStmt .)
    NOT             reduce using rule 19 (Statement -> PrintStmt .)
    MINUS           reduce using rule 19 (Statement -> PrintStmt .)
    TRUE            reduce using rule 19 (Statement -> PrintStmt .)
    FALSE           reduce using rule 19 (Statement -> PrintStmt .)
    NUMERIC         reduce using rule 19 (Statement -> PrintStmt .)
    NIL             reduce using rule 19 (Statement -> PrintStmt .)
    LT              reduce using rule 19 (Statement -> PrintStmt .)
    CKEY            reduce using rule 19 (Statement -> PrintStmt .)
    ELSE            reduce using rule 19 (Statement -> PrintStmt .)


state 42

    (20) Statement -> ReturnStmt .

    FUNC            reduce using rule 20 (Statement -> ReturnStmt .)
    INT             reduce using rule 20 (Statement -> ReturnStmt .)
    BOOL            reduce using rule 20 (Statement -> ReturnStmt .)
    VOID            reduce using rule 20 (Statement -> ReturnStmt .)
    WHILE           reduce using rule 20 (Statement -> ReturnStmt .)
    IF              reduce using rule 20 (Statement -> ReturnStmt .)
    PRINT           reduce using rule 20 (Statement -> ReturnStmt .)
    RETURN          reduce using rule 20 (Statement -> ReturnStmt .)
    OKEY            reduce using rule 20 (Statement -> ReturnStmt .)
    ID              reduce using rule 20 (Statement -> ReturnStmt .)
    NOT             reduce using rule 20 (Statement -> ReturnStmt .)
    MINUS           reduce using rule 20 (Statement -> ReturnStmt .)
    TRUE            reduce using rule 20 (Statement -> ReturnStmt .)
    FALSE           reduce using rule 20 (Statement -> ReturnStmt .)
    NUMERIC         reduce using rule 20 (Statement -> ReturnStmt .)
    NIL             reduce using rule 20 (Statement -> ReturnStmt .)
    LT              reduce using rule 20 (Statement -> ReturnStmt .)
    CKEY            reduce using rule 20 (Statement -> ReturnStmt .)
    ELSE            reduce using rule 20 (Statement -> ReturnStmt .)


state 43

    (21) Statement -> Block .

    FUNC            reduce using rule 21 (Statement -> Block .)
    INT             reduce using rule 21 (Statement -> Block .)
    BOOL            reduce using rule 21 (Statement -> Block .)
    VOID            reduce using rule 21 (Statement -> Block .)
    WHILE           reduce using rule 21 (Statement -> Block .)
    IF              reduce using rule 21 (Statement -> Block .)
    PRINT           reduce using rule 21 (Statement -> Block .)
    RETURN          reduce using rule 21 (Statement -> Block .)
    OKEY            reduce using rule 21 (Statement -> Block .)
    ID              reduce using rule 21 (Statement -> Block .)
    NOT             reduce using rule 21 (Statement -> Block .)
    MINUS           reduce using rule 21 (Statement -> Block .)
    TRUE            reduce using rule 21 (Statement -> Block .)
    FALSE           reduce using rule 21 (Statement -> Block .)
    NUMERIC         reduce using rule 21 (Statement -> Block .)
    NIL             reduce using rule 21 (Statement -> Block .)
    LT              reduce using rule 21 (Statement -> Block .)
    CKEY            reduce using rule 21 (Statement -> Block .)
    ELSE            reduce using rule 21 (Statement -> Block .)


state 44

    (74) Type_ -> INT .

    ID              reduce using rule 74 (Type_ -> INT .)


state 45

    (75) Type_ -> BOOL .

    ID              reduce using rule 75 (Type_ -> BOOL .)


state 46

    (76) Type_ -> VOID .

    ID              reduce using rule 76 (Type_ -> VOID .)


state 47

    (31) WhileStmt -> WHILE . OPP Expression CLP Statement

    OPP             shift and go to state 82


state 48

    (26) IfStmt -> IF . OPP Expression CLP Statement Else_aster

    OPP             shift and go to state 83


state 49

    (29) PrintStmt -> PRINT . Expression SEMICOLOM
    (32) Expression -> . Assignment
    (33) Assignment -> . ID EQ Logic_or
    (34) Assignment -> . Type_ ID EQ Logic_or
    (35) Assignment -> . Logic_or
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    ID              shift and go to state 36
    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67

    Expression                     shift and go to state 84
    Assignment                     shift and go to state 52
    Logic_or                       shift and go to state 53
    Type_                          shift and go to state 85
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 50

    (30) ReturnStmt -> RETURN . Expression SEMICOLOM
    (32) Expression -> . Assignment
    (33) Assignment -> . ID EQ Logic_or
    (34) Assignment -> . Type_ ID EQ Logic_or
    (35) Assignment -> . Logic_or
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    ID              shift and go to state 36
    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67

    Expression                     shift and go to state 86
    Assignment                     shift and go to state 52
    Logic_or                       shift and go to state 53
    Type_                          shift and go to state 85
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 51

    (22) Block -> OKEY . Declaration_aster CKEY
    (23) Declaration_aster -> . Declaration Declaration_aster
    (24) Declaration_aster -> . empty
    (12) Declaration -> . FuncDecl
    (13) Declaration -> . VarDecl
    (14) Declaration -> . Statement
    (77) empty -> .
    (68) FuncDecl -> . FUNC Function
    (15) VarDecl -> . Type_ ID EQ Expression SEMICOLOM
    (16) Statement -> . ExprStmt
    (17) Statement -> . WhileStmt
    (18) Statement -> . IfStmt
    (19) Statement -> . PrintStmt
    (20) Statement -> . ReturnStmt
    (21) Statement -> . Block
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (25) ExprStmt -> . Expression SEMICOLOM
    (31) WhileStmt -> . WHILE OPP Expression CLP Statement
    (26) IfStmt -> . IF OPP Expression CLP Statement Else_aster
    (29) PrintStmt -> . PRINT Expression SEMICOLOM
    (30) ReturnStmt -> . RETURN Expression SEMICOLOM
    (22) Block -> . OKEY Declaration_aster CKEY
    (32) Expression -> . Assignment
    (33) Assignment -> . ID EQ Logic_or
    (34) Assignment -> . Type_ ID EQ Logic_or
    (35) Assignment -> . Logic_or
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    CKEY            reduce using rule 77 (empty -> .)
    FUNC            shift and go to state 34
    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    WHILE           shift and go to state 47
    IF              shift and go to state 48
    PRINT           shift and go to state 49
    RETURN          shift and go to state 50
    OKEY            shift and go to state 51
    ID              shift and go to state 36
    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67

    Declaration_aster              shift and go to state 87
    Declaration                    shift and go to state 29
    empty                          shift and go to state 30
    FuncDecl                       shift and go to state 31
    VarDecl                        shift and go to state 32
    Statement                      shift and go to state 33
    Type_                          shift and go to state 35
    Expression                     shift and go to state 37
    ExprStmt                       shift and go to state 38
    WhileStmt                      shift and go to state 39
    IfStmt                         shift and go to state 40
    PrintStmt                      shift and go to state 41
    ReturnStmt                     shift and go to state 42
    Block                          shift and go to state 43
    Assignment                     shift and go to state 52
    Logic_or                       shift and go to state 53
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 52

    (32) Expression -> Assignment .

    SEMICOLOM       reduce using rule 32 (Expression -> Assignment .)
    CLP             reduce using rule 32 (Expression -> Assignment .)
    COMMA           reduce using rule 32 (Expression -> Assignment .)


state 53

    (35) Assignment -> Logic_or .
    (36) Logic_or -> Logic_or . OR Logic_and

    SEMICOLOM       reduce using rule 35 (Assignment -> Logic_or .)
    CLP             reduce using rule 35 (Assignment -> Logic_or .)
    COMMA           reduce using rule 35 (Assignment -> Logic_or .)
    OR              shift and go to state 88


state 54

    (37) Logic_or -> Logic_and .
    (38) Logic_and -> Logic_and . AND Equality

    OR              reduce using rule 37 (Logic_or -> Logic_and .)
    SEMICOLOM       reduce using rule 37 (Logic_or -> Logic_and .)
    CLP             reduce using rule 37 (Logic_or -> Logic_and .)
    COMMA           reduce using rule 37 (Logic_or -> Logic_and .)
    AND             shift and go to state 89


state 55

    (39) Logic_and -> Equality .
    (40) Equality -> Equality . NOTEQ Comparison
    (41) Equality -> Equality . EQEQ Comparison

    AND             reduce using rule 39 (Logic_and -> Equality .)
    OR              reduce using rule 39 (Logic_and -> Equality .)
    SEMICOLOM       reduce using rule 39 (Logic_and -> Equality .)
    CLP             reduce using rule 39 (Logic_and -> Equality .)
    COMMA           reduce using rule 39 (Logic_and -> Equality .)
    NOTEQ           shift and go to state 90
    EQEQ            shift and go to state 91


state 56

    (42) Equality -> Comparison .
    (43) Comparison -> Comparison . GT Term
    (44) Comparison -> Comparison . LT Term
    (45) Comparison -> Comparison . LTE Term
    (46) Comparison -> Comparison . GTE Term

    NOTEQ           reduce using rule 42 (Equality -> Comparison .)
    EQEQ            reduce using rule 42 (Equality -> Comparison .)
    AND             reduce using rule 42 (Equality -> Comparison .)
    OR              reduce using rule 42 (Equality -> Comparison .)
    SEMICOLOM       reduce using rule 42 (Equality -> Comparison .)
    CLP             reduce using rule 42 (Equality -> Comparison .)
    COMMA           reduce using rule 42 (Equality -> Comparison .)
    GT              shift and go to state 92
    LT              shift and go to state 93
    LTE             shift and go to state 94
    GTE             shift and go to state 95


state 57

    (47) Comparison -> Term .
    (48) Term -> Term . MINUS Factor
    (49) Term -> Term . PLUS Factor

    GT              reduce using rule 47 (Comparison -> Term .)
    LT              reduce using rule 47 (Comparison -> Term .)
    LTE             reduce using rule 47 (Comparison -> Term .)
    GTE             reduce using rule 47 (Comparison -> Term .)
    NOTEQ           reduce using rule 47 (Comparison -> Term .)
    EQEQ            reduce using rule 47 (Comparison -> Term .)
    AND             reduce using rule 47 (Comparison -> Term .)
    OR              reduce using rule 47 (Comparison -> Term .)
    SEMICOLOM       reduce using rule 47 (Comparison -> Term .)
    CLP             reduce using rule 47 (Comparison -> Term .)
    COMMA           reduce using rule 47 (Comparison -> Term .)
    MINUS           shift and go to state 96
    PLUS            shift and go to state 97


state 58

    (55) Unary -> MINUS . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Unary                          shift and go to state 98
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 59

    (50) Term -> Factor .
    (51) Factor -> Factor . STAR Unary
    (52) Factor -> Factor . DIV Unary

    MINUS           reduce using rule 50 (Term -> Factor .)
    PLUS            reduce using rule 50 (Term -> Factor .)
    GT              reduce using rule 50 (Term -> Factor .)
    LT              reduce using rule 50 (Term -> Factor .)
    LTE             reduce using rule 50 (Term -> Factor .)
    GTE             reduce using rule 50 (Term -> Factor .)
    NOTEQ           reduce using rule 50 (Term -> Factor .)
    EQEQ            reduce using rule 50 (Term -> Factor .)
    AND             reduce using rule 50 (Term -> Factor .)
    OR              reduce using rule 50 (Term -> Factor .)
    SEMICOLOM       reduce using rule 50 (Term -> Factor .)
    CLP             reduce using rule 50 (Term -> Factor .)
    COMMA           reduce using rule 50 (Term -> Factor .)
    STAR            shift and go to state 100
    DIV             shift and go to state 101


state 60

    (53) Factor -> Unary .

    STAR            reduce using rule 53 (Factor -> Unary .)
    DIV             reduce using rule 53 (Factor -> Unary .)
    MINUS           reduce using rule 53 (Factor -> Unary .)
    PLUS            reduce using rule 53 (Factor -> Unary .)
    GT              reduce using rule 53 (Factor -> Unary .)
    LT              reduce using rule 53 (Factor -> Unary .)
    LTE             reduce using rule 53 (Factor -> Unary .)
    GTE             reduce using rule 53 (Factor -> Unary .)
    NOTEQ           reduce using rule 53 (Factor -> Unary .)
    EQEQ            reduce using rule 53 (Factor -> Unary .)
    AND             reduce using rule 53 (Factor -> Unary .)
    OR              reduce using rule 53 (Factor -> Unary .)
    SEMICOLOM       reduce using rule 53 (Factor -> Unary .)
    CLP             reduce using rule 53 (Factor -> Unary .)
    COMMA           reduce using rule 53 (Factor -> Unary .)


state 61

    (54) Unary -> NOT . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Unary                          shift and go to state 102
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 62

    (56) Unary -> Call .

    STAR            reduce using rule 56 (Unary -> Call .)
    DIV             reduce using rule 56 (Unary -> Call .)
    MINUS           reduce using rule 56 (Unary -> Call .)
    PLUS            reduce using rule 56 (Unary -> Call .)
    GT              reduce using rule 56 (Unary -> Call .)
    LT              reduce using rule 56 (Unary -> Call .)
    LTE             reduce using rule 56 (Unary -> Call .)
    GTE             reduce using rule 56 (Unary -> Call .)
    NOTEQ           reduce using rule 56 (Unary -> Call .)
    EQEQ            reduce using rule 56 (Unary -> Call .)
    AND             reduce using rule 56 (Unary -> Call .)
    OR              reduce using rule 56 (Unary -> Call .)
    SEMICOLOM       reduce using rule 56 (Unary -> Call .)
    CLP             reduce using rule 56 (Unary -> Call .)
    COMMA           reduce using rule 56 (Unary -> Call .)


state 63

    (57) Call -> Primary . OPP Arguments CLP
    (58) Call -> Primary .

    OPP             shift and go to state 103
    STAR            reduce using rule 58 (Call -> Primary .)
    DIV             reduce using rule 58 (Call -> Primary .)
    MINUS           reduce using rule 58 (Call -> Primary .)
    PLUS            reduce using rule 58 (Call -> Primary .)
    GT              reduce using rule 58 (Call -> Primary .)
    LT              reduce using rule 58 (Call -> Primary .)
    LTE             reduce using rule 58 (Call -> Primary .)
    GTE             reduce using rule 58 (Call -> Primary .)
    NOTEQ           reduce using rule 58 (Call -> Primary .)
    EQEQ            reduce using rule 58 (Call -> Primary .)
    AND             reduce using rule 58 (Call -> Primary .)
    OR              reduce using rule 58 (Call -> Primary .)
    SEMICOLOM       reduce using rule 58 (Call -> Primary .)
    CLP             reduce using rule 58 (Call -> Primary .)
    COMMA           reduce using rule 58 (Call -> Primary .)


state 64

    (60) Primary -> TRUE .

    OPP             reduce using rule 60 (Primary -> TRUE .)
    STAR            reduce using rule 60 (Primary -> TRUE .)
    DIV             reduce using rule 60 (Primary -> TRUE .)
    MINUS           reduce using rule 60 (Primary -> TRUE .)
    PLUS            reduce using rule 60 (Primary -> TRUE .)
    GT              reduce using rule 60 (Primary -> TRUE .)
    LT              reduce using rule 60 (Primary -> TRUE .)
    LTE             reduce using rule 60 (Primary -> TRUE .)
    GTE             reduce using rule 60 (Primary -> TRUE .)
    NOTEQ           reduce using rule 60 (Primary -> TRUE .)
    EQEQ            reduce using rule 60 (Primary -> TRUE .)
    AND             reduce using rule 60 (Primary -> TRUE .)
    OR              reduce using rule 60 (Primary -> TRUE .)
    SEMICOLOM       reduce using rule 60 (Primary -> TRUE .)
    CLP             reduce using rule 60 (Primary -> TRUE .)
    COMMA           reduce using rule 60 (Primary -> TRUE .)


state 65

    (61) Primary -> FALSE .

    OPP             reduce using rule 61 (Primary -> FALSE .)
    STAR            reduce using rule 61 (Primary -> FALSE .)
    DIV             reduce using rule 61 (Primary -> FALSE .)
    MINUS           reduce using rule 61 (Primary -> FALSE .)
    PLUS            reduce using rule 61 (Primary -> FALSE .)
    GT              reduce using rule 61 (Primary -> FALSE .)
    LT              reduce using rule 61 (Primary -> FALSE .)
    LTE             reduce using rule 61 (Primary -> FALSE .)
    GTE             reduce using rule 61 (Primary -> FALSE .)
    NOTEQ           reduce using rule 61 (Primary -> FALSE .)
    EQEQ            reduce using rule 61 (Primary -> FALSE .)
    AND             reduce using rule 61 (Primary -> FALSE .)
    OR              reduce using rule 61 (Primary -> FALSE .)
    SEMICOLOM       reduce using rule 61 (Primary -> FALSE .)
    CLP             reduce using rule 61 (Primary -> FALSE .)
    COMMA           reduce using rule 61 (Primary -> FALSE .)


state 66

    (62) Primary -> NUMERIC .

    OPP             reduce using rule 62 (Primary -> NUMERIC .)
    STAR            reduce using rule 62 (Primary -> NUMERIC .)
    DIV             reduce using rule 62 (Primary -> NUMERIC .)
    MINUS           reduce using rule 62 (Primary -> NUMERIC .)
    PLUS            reduce using rule 62 (Primary -> NUMERIC .)
    GT              reduce using rule 62 (Primary -> NUMERIC .)
    LT              reduce using rule 62 (Primary -> NUMERIC .)
    LTE             reduce using rule 62 (Primary -> NUMERIC .)
    GTE             reduce using rule 62 (Primary -> NUMERIC .)
    NOTEQ           reduce using rule 62 (Primary -> NUMERIC .)
    EQEQ            reduce using rule 62 (Primary -> NUMERIC .)
    AND             reduce using rule 62 (Primary -> NUMERIC .)
    OR              reduce using rule 62 (Primary -> NUMERIC .)
    SEMICOLOM       reduce using rule 62 (Primary -> NUMERIC .)
    CLP             reduce using rule 62 (Primary -> NUMERIC .)
    COMMA           reduce using rule 62 (Primary -> NUMERIC .)


state 67

    (63) Primary -> NIL .

    OPP             reduce using rule 63 (Primary -> NIL .)
    STAR            reduce using rule 63 (Primary -> NIL .)
    DIV             reduce using rule 63 (Primary -> NIL .)
    MINUS           reduce using rule 63 (Primary -> NIL .)
    PLUS            reduce using rule 63 (Primary -> NIL .)
    GT              reduce using rule 63 (Primary -> NIL .)
    LT              reduce using rule 63 (Primary -> NIL .)
    LTE             reduce using rule 63 (Primary -> NIL .)
    GTE             reduce using rule 63 (Primary -> NIL .)
    NOTEQ           reduce using rule 63 (Primary -> NIL .)
    EQEQ            reduce using rule 63 (Primary -> NIL .)
    AND             reduce using rule 63 (Primary -> NIL .)
    OR              reduce using rule 63 (Primary -> NIL .)
    SEMICOLOM       reduce using rule 63 (Primary -> NIL .)
    CLP             reduce using rule 63 (Primary -> NIL .)
    COMMA           reduce using rule 63 (Primary -> NIL .)


state 68

    (2) R -> ROUNDS EQ . NUMERIC SEMICOLOM

    NUMERIC         shift and go to state 104


state 69

    (3) M -> LT MAP GT MapDetail LT DIV . MAP GT

    MAP             shift and go to state 105


state 70

    (4) MapDetail -> ROW EQ NUMERIC . SEMICOLOM MapDetail

    SEMICOLOM       shift and go to state 106


state 71

    (5) MapDetail -> COL EQ NUMERIC . SEMICOLOM MapDetail

    SEMICOLOM       shift and go to state 107


state 72

    (7) A -> LT ARMY GT ArmyDetail LT . DIV ARMY GT

    DIV             shift and go to state 108


state 73

    (8) ArmyDetail -> ARMY_name EQ . NUMERIC SEMICOLOM ArmyDetail

    NUMERIC         shift and go to state 109


state 74

    (9) ArmyDetail -> AMOUNT EQ . NUMERIC SEMICOLOM ArmyDetail

    NUMERIC         shift and go to state 110


state 75

    (1) Simulation -> LT SIMULATION GT M A A R Program LT . DIV SIMULATION GT

    DIV             shift and go to state 111


state 76

    (23) Declaration_aster -> Declaration Declaration_aster .

    LT              reduce using rule 23 (Declaration_aster -> Declaration Declaration_aster .)
    CKEY            reduce using rule 23 (Declaration_aster -> Declaration Declaration_aster .)


state 77

    (68) FuncDecl -> FUNC Function .

    FUNC            reduce using rule 68 (FuncDecl -> FUNC Function .)
    INT             reduce using rule 68 (FuncDecl -> FUNC Function .)
    BOOL            reduce using rule 68 (FuncDecl -> FUNC Function .)
    VOID            reduce using rule 68 (FuncDecl -> FUNC Function .)
    WHILE           reduce using rule 68 (FuncDecl -> FUNC Function .)
    IF              reduce using rule 68 (FuncDecl -> FUNC Function .)
    PRINT           reduce using rule 68 (FuncDecl -> FUNC Function .)
    RETURN          reduce using rule 68 (FuncDecl -> FUNC Function .)
    OKEY            reduce using rule 68 (FuncDecl -> FUNC Function .)
    ID              reduce using rule 68 (FuncDecl -> FUNC Function .)
    NOT             reduce using rule 68 (FuncDecl -> FUNC Function .)
    MINUS           reduce using rule 68 (FuncDecl -> FUNC Function .)
    TRUE            reduce using rule 68 (FuncDecl -> FUNC Function .)
    FALSE           reduce using rule 68 (FuncDecl -> FUNC Function .)
    NUMERIC         reduce using rule 68 (FuncDecl -> FUNC Function .)
    NIL             reduce using rule 68 (FuncDecl -> FUNC Function .)
    LT              reduce using rule 68 (FuncDecl -> FUNC Function .)
    CKEY            reduce using rule 68 (FuncDecl -> FUNC Function .)


state 78

    (69) Function -> Type_ . ID OPP Params CLP Block

    ID              shift and go to state 112


state 79

    (15) VarDecl -> Type_ ID . EQ Expression SEMICOLOM
    (34) Assignment -> Type_ ID . EQ Logic_or

    EQ              shift and go to state 113


state 80

    (33) Assignment -> ID EQ . Logic_or
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Logic_or                       shift and go to state 114
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 81

    (25) ExprStmt -> Expression SEMICOLOM .

    FUNC            reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    INT             reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    BOOL            reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    VOID            reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    WHILE           reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    IF              reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    PRINT           reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    RETURN          reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    OKEY            reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    ID              reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    NOT             reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    MINUS           reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    TRUE            reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    FALSE           reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    NUMERIC         reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    NIL             reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    LT              reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    CKEY            reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)
    ELSE            reduce using rule 25 (ExprStmt -> Expression SEMICOLOM .)


state 82

    (31) WhileStmt -> WHILE OPP . Expression CLP Statement
    (32) Expression -> . Assignment
    (33) Assignment -> . ID EQ Logic_or
    (34) Assignment -> . Type_ ID EQ Logic_or
    (35) Assignment -> . Logic_or
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    ID              shift and go to state 36
    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67

    Expression                     shift and go to state 115
    Assignment                     shift and go to state 52
    Logic_or                       shift and go to state 53
    Type_                          shift and go to state 85
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 83

    (26) IfStmt -> IF OPP . Expression CLP Statement Else_aster
    (32) Expression -> . Assignment
    (33) Assignment -> . ID EQ Logic_or
    (34) Assignment -> . Type_ ID EQ Logic_or
    (35) Assignment -> . Logic_or
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    ID              shift and go to state 36
    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67

    Expression                     shift and go to state 116
    Assignment                     shift and go to state 52
    Logic_or                       shift and go to state 53
    Type_                          shift and go to state 85
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 84

    (29) PrintStmt -> PRINT Expression . SEMICOLOM

    SEMICOLOM       shift and go to state 117


state 85

    (34) Assignment -> Type_ . ID EQ Logic_or

    ID              shift and go to state 118


state 86

    (30) ReturnStmt -> RETURN Expression . SEMICOLOM

    SEMICOLOM       shift and go to state 119


state 87

    (22) Block -> OKEY Declaration_aster . CKEY

    CKEY            shift and go to state 120


state 88

    (36) Logic_or -> Logic_or OR . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Logic_and                      shift and go to state 121
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 89

    (38) Logic_and -> Logic_and AND . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Equality                       shift and go to state 122
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 90

    (40) Equality -> Equality NOTEQ . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Comparison                     shift and go to state 123
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 91

    (41) Equality -> Equality EQEQ . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Comparison                     shift and go to state 124
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 92

    (43) Comparison -> Comparison GT . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Term                           shift and go to state 125
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 93

    (44) Comparison -> Comparison LT . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Term                           shift and go to state 126
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 94

    (45) Comparison -> Comparison LTE . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Term                           shift and go to state 127
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 95

    (46) Comparison -> Comparison GTE . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Term                           shift and go to state 128
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 96

    (48) Term -> Term MINUS . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Factor                         shift and go to state 129
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 97

    (49) Term -> Term PLUS . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Factor                         shift and go to state 130
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 98

    (55) Unary -> MINUS Unary .

    STAR            reduce using rule 55 (Unary -> MINUS Unary .)
    DIV             reduce using rule 55 (Unary -> MINUS Unary .)
    MINUS           reduce using rule 55 (Unary -> MINUS Unary .)
    PLUS            reduce using rule 55 (Unary -> MINUS Unary .)
    GT              reduce using rule 55 (Unary -> MINUS Unary .)
    LT              reduce using rule 55 (Unary -> MINUS Unary .)
    LTE             reduce using rule 55 (Unary -> MINUS Unary .)
    GTE             reduce using rule 55 (Unary -> MINUS Unary .)
    NOTEQ           reduce using rule 55 (Unary -> MINUS Unary .)
    EQEQ            reduce using rule 55 (Unary -> MINUS Unary .)
    AND             reduce using rule 55 (Unary -> MINUS Unary .)
    OR              reduce using rule 55 (Unary -> MINUS Unary .)
    SEMICOLOM       reduce using rule 55 (Unary -> MINUS Unary .)
    CLP             reduce using rule 55 (Unary -> MINUS Unary .)
    COMMA           reduce using rule 55 (Unary -> MINUS Unary .)


state 99

    (64) Primary -> ID .

    OPP             reduce using rule 64 (Primary -> ID .)
    STAR            reduce using rule 64 (Primary -> ID .)
    DIV             reduce using rule 64 (Primary -> ID .)
    MINUS           reduce using rule 64 (Primary -> ID .)
    PLUS            reduce using rule 64 (Primary -> ID .)
    GT              reduce using rule 64 (Primary -> ID .)
    LT              reduce using rule 64 (Primary -> ID .)
    LTE             reduce using rule 64 (Primary -> ID .)
    GTE             reduce using rule 64 (Primary -> ID .)
    NOTEQ           reduce using rule 64 (Primary -> ID .)
    EQEQ            reduce using rule 64 (Primary -> ID .)
    AND             reduce using rule 64 (Primary -> ID .)
    OR              reduce using rule 64 (Primary -> ID .)
    SEMICOLOM       reduce using rule 64 (Primary -> ID .)
    CLP             reduce using rule 64 (Primary -> ID .)
    COMMA           reduce using rule 64 (Primary -> ID .)


state 100

    (51) Factor -> Factor STAR . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Unary                          shift and go to state 131
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 101

    (52) Factor -> Factor DIV . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Unary                          shift and go to state 132
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 102

    (54) Unary -> NOT Unary .

    STAR            reduce using rule 54 (Unary -> NOT Unary .)
    DIV             reduce using rule 54 (Unary -> NOT Unary .)
    MINUS           reduce using rule 54 (Unary -> NOT Unary .)
    PLUS            reduce using rule 54 (Unary -> NOT Unary .)
    GT              reduce using rule 54 (Unary -> NOT Unary .)
    LT              reduce using rule 54 (Unary -> NOT Unary .)
    LTE             reduce using rule 54 (Unary -> NOT Unary .)
    GTE             reduce using rule 54 (Unary -> NOT Unary .)
    NOTEQ           reduce using rule 54 (Unary -> NOT Unary .)
    EQEQ            reduce using rule 54 (Unary -> NOT Unary .)
    AND             reduce using rule 54 (Unary -> NOT Unary .)
    OR              reduce using rule 54 (Unary -> NOT Unary .)
    SEMICOLOM       reduce using rule 54 (Unary -> NOT Unary .)
    CLP             reduce using rule 54 (Unary -> NOT Unary .)
    COMMA           reduce using rule 54 (Unary -> NOT Unary .)


state 103

    (57) Call -> Primary OPP . Arguments CLP
    (59) Arguments -> . empty
    (65) Arguments -> . Expression Expression_aster
    (77) empty -> .
    (32) Expression -> . Assignment
    (33) Assignment -> . ID EQ Logic_or
    (34) Assignment -> . Type_ ID EQ Logic_or
    (35) Assignment -> . Logic_or
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    CLP             reduce using rule 77 (empty -> .)
    ID              shift and go to state 36
    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67

    Primary                        shift and go to state 63
    Arguments                      shift and go to state 133
    empty                          shift and go to state 134
    Expression                     shift and go to state 135
    Assignment                     shift and go to state 52
    Logic_or                       shift and go to state 53
    Type_                          shift and go to state 85
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62

state 104

    (2) R -> ROUNDS EQ NUMERIC . SEMICOLOM

    SEMICOLOM       shift and go to state 136


state 105

    (3) M -> LT MAP GT MapDetail LT DIV MAP . GT

    GT              shift and go to state 137


state 106

    (4) MapDetail -> ROW EQ NUMERIC SEMICOLOM . MapDetail
    (4) MapDetail -> . ROW EQ NUMERIC SEMICOLOM MapDetail
    (5) MapDetail -> . COL EQ NUMERIC SEMICOLOM MapDetail
    (6) MapDetail -> . empty
    (77) empty -> .

    ROW             shift and go to state 14
    COL             shift and go to state 15
    LT              reduce using rule 77 (empty -> .)

    MapDetail                      shift and go to state 138
    empty                          shift and go to state 16

state 107

    (5) MapDetail -> COL EQ NUMERIC SEMICOLOM . MapDetail
    (4) MapDetail -> . ROW EQ NUMERIC SEMICOLOM MapDetail
    (5) MapDetail -> . COL EQ NUMERIC SEMICOLOM MapDetail
    (6) MapDetail -> . empty
    (77) empty -> .

    ROW             shift and go to state 14
    COL             shift and go to state 15
    LT              reduce using rule 77 (empty -> .)

    MapDetail                      shift and go to state 139
    empty                          shift and go to state 16

state 108

    (7) A -> LT ARMY GT ArmyDetail LT DIV . ARMY GT

    ARMY            shift and go to state 140


state 109

    (8) ArmyDetail -> ARMY_name EQ NUMERIC . SEMICOLOM ArmyDetail

    SEMICOLOM       shift and go to state 141


state 110

    (9) ArmyDetail -> AMOUNT EQ NUMERIC . SEMICOLOM ArmyDetail

    SEMICOLOM       shift and go to state 142


state 111

    (1) Simulation -> LT SIMULATION GT M A A R Program LT DIV . SIMULATION GT

    SIMULATION      shift and go to state 143


state 112

    (69) Function -> Type_ ID . OPP Params CLP Block

    OPP             shift and go to state 144


state 113

    (15) VarDecl -> Type_ ID EQ . Expression SEMICOLOM
    (34) Assignment -> Type_ ID EQ . Logic_or
    (32) Expression -> . Assignment
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (33) Assignment -> . ID EQ Logic_or
    (34) Assignment -> . Type_ ID EQ Logic_or
    (35) Assignment -> . Logic_or
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    ID              shift and go to state 36
    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67

    Type_                          shift and go to state 85
    Expression                     shift and go to state 145
    Logic_or                       shift and go to state 146
    Assignment                     shift and go to state 52
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 114

    (33) Assignment -> ID EQ Logic_or .
    (36) Logic_or -> Logic_or . OR Logic_and

    SEMICOLOM       reduce using rule 33 (Assignment -> ID EQ Logic_or .)
    CLP             reduce using rule 33 (Assignment -> ID EQ Logic_or .)
    COMMA           reduce using rule 33 (Assignment -> ID EQ Logic_or .)
    OR              shift and go to state 88


state 115

    (31) WhileStmt -> WHILE OPP Expression . CLP Statement

    CLP             shift and go to state 147


state 116

    (26) IfStmt -> IF OPP Expression . CLP Statement Else_aster

    CLP             shift and go to state 148


state 117

    (29) PrintStmt -> PRINT Expression SEMICOLOM .

    FUNC            reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    INT             reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    BOOL            reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    VOID            reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    WHILE           reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    IF              reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    PRINT           reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    RETURN          reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    OKEY            reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    ID              reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    NOT             reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    MINUS           reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    TRUE            reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    FALSE           reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    NUMERIC         reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    NIL             reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    LT              reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    CKEY            reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)
    ELSE            reduce using rule 29 (PrintStmt -> PRINT Expression SEMICOLOM .)


state 118

    (34) Assignment -> Type_ ID . EQ Logic_or

    EQ              shift and go to state 149


state 119

    (30) ReturnStmt -> RETURN Expression SEMICOLOM .

    FUNC            reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    INT             reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    BOOL            reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    VOID            reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    WHILE           reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    IF              reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    PRINT           reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    RETURN          reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    OKEY            reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    ID              reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    NOT             reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    MINUS           reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    TRUE            reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    FALSE           reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    NUMERIC         reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    NIL             reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    LT              reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    CKEY            reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)
    ELSE            reduce using rule 30 (ReturnStmt -> RETURN Expression SEMICOLOM .)


state 120

    (22) Block -> OKEY Declaration_aster CKEY .

    FUNC            reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    INT             reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    BOOL            reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    VOID            reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    WHILE           reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    IF              reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    PRINT           reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    RETURN          reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    OKEY            reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    ID              reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    NOT             reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    MINUS           reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    TRUE            reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    FALSE           reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    NUMERIC         reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    NIL             reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    LT              reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    CKEY            reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)
    ELSE            reduce using rule 22 (Block -> OKEY Declaration_aster CKEY .)


state 121

    (36) Logic_or -> Logic_or OR Logic_and .
    (38) Logic_and -> Logic_and . AND Equality

    OR              reduce using rule 36 (Logic_or -> Logic_or OR Logic_and .)
    SEMICOLOM       reduce using rule 36 (Logic_or -> Logic_or OR Logic_and .)
    CLP             reduce using rule 36 (Logic_or -> Logic_or OR Logic_and .)
    COMMA           reduce using rule 36 (Logic_or -> Logic_or OR Logic_and .)
    AND             shift and go to state 89


state 122

    (38) Logic_and -> Logic_and AND Equality .
    (40) Equality -> Equality . NOTEQ Comparison
    (41) Equality -> Equality . EQEQ Comparison

    AND             reduce using rule 38 (Logic_and -> Logic_and AND Equality .)
    OR              reduce using rule 38 (Logic_and -> Logic_and AND Equality .)
    SEMICOLOM       reduce using rule 38 (Logic_and -> Logic_and AND Equality .)
    CLP             reduce using rule 38 (Logic_and -> Logic_and AND Equality .)
    COMMA           reduce using rule 38 (Logic_and -> Logic_and AND Equality .)
    NOTEQ           shift and go to state 90
    EQEQ            shift and go to state 91


state 123

    (40) Equality -> Equality NOTEQ Comparison .
    (43) Comparison -> Comparison . GT Term
    (44) Comparison -> Comparison . LT Term
    (45) Comparison -> Comparison . LTE Term
    (46) Comparison -> Comparison . GTE Term

    NOTEQ           reduce using rule 40 (Equality -> Equality NOTEQ Comparison .)
    EQEQ            reduce using rule 40 (Equality -> Equality NOTEQ Comparison .)
    AND             reduce using rule 40 (Equality -> Equality NOTEQ Comparison .)
    OR              reduce using rule 40 (Equality -> Equality NOTEQ Comparison .)
    SEMICOLOM       reduce using rule 40 (Equality -> Equality NOTEQ Comparison .)
    CLP             reduce using rule 40 (Equality -> Equality NOTEQ Comparison .)
    COMMA           reduce using rule 40 (Equality -> Equality NOTEQ Comparison .)
    GT              shift and go to state 92
    LT              shift and go to state 93
    LTE             shift and go to state 94
    GTE             shift and go to state 95


state 124

    (41) Equality -> Equality EQEQ Comparison .
    (43) Comparison -> Comparison . GT Term
    (44) Comparison -> Comparison . LT Term
    (45) Comparison -> Comparison . LTE Term
    (46) Comparison -> Comparison . GTE Term

    NOTEQ           reduce using rule 41 (Equality -> Equality EQEQ Comparison .)
    EQEQ            reduce using rule 41 (Equality -> Equality EQEQ Comparison .)
    AND             reduce using rule 41 (Equality -> Equality EQEQ Comparison .)
    OR              reduce using rule 41 (Equality -> Equality EQEQ Comparison .)
    SEMICOLOM       reduce using rule 41 (Equality -> Equality EQEQ Comparison .)
    CLP             reduce using rule 41 (Equality -> Equality EQEQ Comparison .)
    COMMA           reduce using rule 41 (Equality -> Equality EQEQ Comparison .)
    GT              shift and go to state 92
    LT              shift and go to state 93
    LTE             shift and go to state 94
    GTE             shift and go to state 95


state 125

    (43) Comparison -> Comparison GT Term .
    (48) Term -> Term . MINUS Factor
    (49) Term -> Term . PLUS Factor

    GT              reduce using rule 43 (Comparison -> Comparison GT Term .)
    LT              reduce using rule 43 (Comparison -> Comparison GT Term .)
    LTE             reduce using rule 43 (Comparison -> Comparison GT Term .)
    GTE             reduce using rule 43 (Comparison -> Comparison GT Term .)
    NOTEQ           reduce using rule 43 (Comparison -> Comparison GT Term .)
    EQEQ            reduce using rule 43 (Comparison -> Comparison GT Term .)
    AND             reduce using rule 43 (Comparison -> Comparison GT Term .)
    OR              reduce using rule 43 (Comparison -> Comparison GT Term .)
    SEMICOLOM       reduce using rule 43 (Comparison -> Comparison GT Term .)
    CLP             reduce using rule 43 (Comparison -> Comparison GT Term .)
    COMMA           reduce using rule 43 (Comparison -> Comparison GT Term .)
    MINUS           shift and go to state 96
    PLUS            shift and go to state 97


state 126

    (44) Comparison -> Comparison LT Term .
    (48) Term -> Term . MINUS Factor
    (49) Term -> Term . PLUS Factor

    GT              reduce using rule 44 (Comparison -> Comparison LT Term .)
    LT              reduce using rule 44 (Comparison -> Comparison LT Term .)
    LTE             reduce using rule 44 (Comparison -> Comparison LT Term .)
    GTE             reduce using rule 44 (Comparison -> Comparison LT Term .)
    NOTEQ           reduce using rule 44 (Comparison -> Comparison LT Term .)
    EQEQ            reduce using rule 44 (Comparison -> Comparison LT Term .)
    AND             reduce using rule 44 (Comparison -> Comparison LT Term .)
    OR              reduce using rule 44 (Comparison -> Comparison LT Term .)
    SEMICOLOM       reduce using rule 44 (Comparison -> Comparison LT Term .)
    CLP             reduce using rule 44 (Comparison -> Comparison LT Term .)
    COMMA           reduce using rule 44 (Comparison -> Comparison LT Term .)
    MINUS           shift and go to state 96
    PLUS            shift and go to state 97


state 127

    (45) Comparison -> Comparison LTE Term .
    (48) Term -> Term . MINUS Factor
    (49) Term -> Term . PLUS Factor

    GT              reduce using rule 45 (Comparison -> Comparison LTE Term .)
    LT              reduce using rule 45 (Comparison -> Comparison LTE Term .)
    LTE             reduce using rule 45 (Comparison -> Comparison LTE Term .)
    GTE             reduce using rule 45 (Comparison -> Comparison LTE Term .)
    NOTEQ           reduce using rule 45 (Comparison -> Comparison LTE Term .)
    EQEQ            reduce using rule 45 (Comparison -> Comparison LTE Term .)
    AND             reduce using rule 45 (Comparison -> Comparison LTE Term .)
    OR              reduce using rule 45 (Comparison -> Comparison LTE Term .)
    SEMICOLOM       reduce using rule 45 (Comparison -> Comparison LTE Term .)
    CLP             reduce using rule 45 (Comparison -> Comparison LTE Term .)
    COMMA           reduce using rule 45 (Comparison -> Comparison LTE Term .)
    MINUS           shift and go to state 96
    PLUS            shift and go to state 97


state 128

    (46) Comparison -> Comparison GTE Term .
    (48) Term -> Term . MINUS Factor
    (49) Term -> Term . PLUS Factor

    GT              reduce using rule 46 (Comparison -> Comparison GTE Term .)
    LT              reduce using rule 46 (Comparison -> Comparison GTE Term .)
    LTE             reduce using rule 46 (Comparison -> Comparison GTE Term .)
    GTE             reduce using rule 46 (Comparison -> Comparison GTE Term .)
    NOTEQ           reduce using rule 46 (Comparison -> Comparison GTE Term .)
    EQEQ            reduce using rule 46 (Comparison -> Comparison GTE Term .)
    AND             reduce using rule 46 (Comparison -> Comparison GTE Term .)
    OR              reduce using rule 46 (Comparison -> Comparison GTE Term .)
    SEMICOLOM       reduce using rule 46 (Comparison -> Comparison GTE Term .)
    CLP             reduce using rule 46 (Comparison -> Comparison GTE Term .)
    COMMA           reduce using rule 46 (Comparison -> Comparison GTE Term .)
    MINUS           shift and go to state 96
    PLUS            shift and go to state 97


state 129

    (48) Term -> Term MINUS Factor .
    (51) Factor -> Factor . STAR Unary
    (52) Factor -> Factor . DIV Unary

    MINUS           reduce using rule 48 (Term -> Term MINUS Factor .)
    PLUS            reduce using rule 48 (Term -> Term MINUS Factor .)
    GT              reduce using rule 48 (Term -> Term MINUS Factor .)
    LT              reduce using rule 48 (Term -> Term MINUS Factor .)
    LTE             reduce using rule 48 (Term -> Term MINUS Factor .)
    GTE             reduce using rule 48 (Term -> Term MINUS Factor .)
    NOTEQ           reduce using rule 48 (Term -> Term MINUS Factor .)
    EQEQ            reduce using rule 48 (Term -> Term MINUS Factor .)
    AND             reduce using rule 48 (Term -> Term MINUS Factor .)
    OR              reduce using rule 48 (Term -> Term MINUS Factor .)
    SEMICOLOM       reduce using rule 48 (Term -> Term MINUS Factor .)
    CLP             reduce using rule 48 (Term -> Term MINUS Factor .)
    COMMA           reduce using rule 48 (Term -> Term MINUS Factor .)
    STAR            shift and go to state 100
    DIV             shift and go to state 101


state 130

    (49) Term -> Term PLUS Factor .
    (51) Factor -> Factor . STAR Unary
    (52) Factor -> Factor . DIV Unary

    MINUS           reduce using rule 49 (Term -> Term PLUS Factor .)
    PLUS            reduce using rule 49 (Term -> Term PLUS Factor .)
    GT              reduce using rule 49 (Term -> Term PLUS Factor .)
    LT              reduce using rule 49 (Term -> Term PLUS Factor .)
    LTE             reduce using rule 49 (Term -> Term PLUS Factor .)
    GTE             reduce using rule 49 (Term -> Term PLUS Factor .)
    NOTEQ           reduce using rule 49 (Term -> Term PLUS Factor .)
    EQEQ            reduce using rule 49 (Term -> Term PLUS Factor .)
    AND             reduce using rule 49 (Term -> Term PLUS Factor .)
    OR              reduce using rule 49 (Term -> Term PLUS Factor .)
    SEMICOLOM       reduce using rule 49 (Term -> Term PLUS Factor .)
    CLP             reduce using rule 49 (Term -> Term PLUS Factor .)
    COMMA           reduce using rule 49 (Term -> Term PLUS Factor .)
    STAR            shift and go to state 100
    DIV             shift and go to state 101


state 131

    (51) Factor -> Factor STAR Unary .

    STAR            reduce using rule 51 (Factor -> Factor STAR Unary .)
    DIV             reduce using rule 51 (Factor -> Factor STAR Unary .)
    MINUS           reduce using rule 51 (Factor -> Factor STAR Unary .)
    PLUS            reduce using rule 51 (Factor -> Factor STAR Unary .)
    GT              reduce using rule 51 (Factor -> Factor STAR Unary .)
    LT              reduce using rule 51 (Factor -> Factor STAR Unary .)
    LTE             reduce using rule 51 (Factor -> Factor STAR Unary .)
    GTE             reduce using rule 51 (Factor -> Factor STAR Unary .)
    NOTEQ           reduce using rule 51 (Factor -> Factor STAR Unary .)
    EQEQ            reduce using rule 51 (Factor -> Factor STAR Unary .)
    AND             reduce using rule 51 (Factor -> Factor STAR Unary .)
    OR              reduce using rule 51 (Factor -> Factor STAR Unary .)
    SEMICOLOM       reduce using rule 51 (Factor -> Factor STAR Unary .)
    CLP             reduce using rule 51 (Factor -> Factor STAR Unary .)
    COMMA           reduce using rule 51 (Factor -> Factor STAR Unary .)


state 132

    (52) Factor -> Factor DIV Unary .

    STAR            reduce using rule 52 (Factor -> Factor DIV Unary .)
    DIV             reduce using rule 52 (Factor -> Factor DIV Unary .)
    MINUS           reduce using rule 52 (Factor -> Factor DIV Unary .)
    PLUS            reduce using rule 52 (Factor -> Factor DIV Unary .)
    GT              reduce using rule 52 (Factor -> Factor DIV Unary .)
    LT              reduce using rule 52 (Factor -> Factor DIV Unary .)
    LTE             reduce using rule 52 (Factor -> Factor DIV Unary .)
    GTE             reduce using rule 52 (Factor -> Factor DIV Unary .)
    NOTEQ           reduce using rule 52 (Factor -> Factor DIV Unary .)
    EQEQ            reduce using rule 52 (Factor -> Factor DIV Unary .)
    AND             reduce using rule 52 (Factor -> Factor DIV Unary .)
    OR              reduce using rule 52 (Factor -> Factor DIV Unary .)
    SEMICOLOM       reduce using rule 52 (Factor -> Factor DIV Unary .)
    CLP             reduce using rule 52 (Factor -> Factor DIV Unary .)
    COMMA           reduce using rule 52 (Factor -> Factor DIV Unary .)


state 133

    (57) Call -> Primary OPP Arguments . CLP

    CLP             shift and go to state 150


state 134

    (59) Arguments -> empty .

    CLP             reduce using rule 59 (Arguments -> empty .)


state 135

    (65) Arguments -> Expression . Expression_aster
    (66) Expression_aster -> . COMMA Expression Expression_aster
    (67) Expression_aster -> . empty
    (77) empty -> .

    COMMA           shift and go to state 152
    CLP             reduce using rule 77 (empty -> .)

    Expression_aster               shift and go to state 151
    empty                          shift and go to state 153

state 136

    (2) R -> ROUNDS EQ NUMERIC SEMICOLOM .

    FUNC            reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    INT             reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    BOOL            reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    VOID            reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    WHILE           reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    IF              reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    PRINT           reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    RETURN          reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    OKEY            reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    ID              reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    NOT             reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    MINUS           reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    TRUE            reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    FALSE           reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    NUMERIC         reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    NIL             reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)
    LT              reduce using rule 2 (R -> ROUNDS EQ NUMERIC SEMICOLOM .)


state 137

    (3) M -> LT MAP GT MapDetail LT DIV MAP GT .

    LT              reduce using rule 3 (M -> LT MAP GT MapDetail LT DIV MAP GT .)


state 138

    (4) MapDetail -> ROW EQ NUMERIC SEMICOLOM MapDetail .

    LT              reduce using rule 4 (MapDetail -> ROW EQ NUMERIC SEMICOLOM MapDetail .)


state 139

    (5) MapDetail -> COL EQ NUMERIC SEMICOLOM MapDetail .

    LT              reduce using rule 5 (MapDetail -> COL EQ NUMERIC SEMICOLOM MapDetail .)


state 140

    (7) A -> LT ARMY GT ArmyDetail LT DIV ARMY . GT

    GT              shift and go to state 154


state 141

    (8) ArmyDetail -> ARMY_name EQ NUMERIC SEMICOLOM . ArmyDetail
    (8) ArmyDetail -> . ARMY_name EQ NUMERIC SEMICOLOM ArmyDetail
    (9) ArmyDetail -> . AMOUNT EQ NUMERIC SEMICOLOM ArmyDetail
    (10) ArmyDetail -> . empty
    (77) empty -> .

    ARMY_name       shift and go to state 24
    AMOUNT          shift and go to state 25
    LT              reduce using rule 77 (empty -> .)

    ArmyDetail                     shift and go to state 155
    empty                          shift and go to state 26

state 142

    (9) ArmyDetail -> AMOUNT EQ NUMERIC SEMICOLOM . ArmyDetail
    (8) ArmyDetail -> . ARMY_name EQ NUMERIC SEMICOLOM ArmyDetail
    (9) ArmyDetail -> . AMOUNT EQ NUMERIC SEMICOLOM ArmyDetail
    (10) ArmyDetail -> . empty
    (77) empty -> .

    ARMY_name       shift and go to state 24
    AMOUNT          shift and go to state 25
    LT              reduce using rule 77 (empty -> .)

    ArmyDetail                     shift and go to state 156
    empty                          shift and go to state 26

state 143

    (1) Simulation -> LT SIMULATION GT M A A R Program LT DIV SIMULATION . GT

    GT              shift and go to state 157


state 144

    (69) Function -> Type_ ID OPP . Params CLP Block
    (70) Params -> . Type_ ID ParamsAster
    (71) Params -> . empty
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (77) empty -> .

    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    CLP             reduce using rule 77 (empty -> .)

    Type_                          shift and go to state 158
    Params                         shift and go to state 159
    empty                          shift and go to state 160

state 145

    (15) VarDecl -> Type_ ID EQ Expression . SEMICOLOM

    SEMICOLOM       shift and go to state 161


state 146

    (34) Assignment -> Type_ ID EQ Logic_or .
    (36) Logic_or -> Logic_or . OR Logic_and
    (35) Assignment -> Logic_or .

  ! reduce/reduce conflict for SEMICOLOM resolved using rule 34 (Assignment -> Type_ ID EQ Logic_or .)
    SEMICOLOM       reduce using rule 34 (Assignment -> Type_ ID EQ Logic_or .)
    OR              shift and go to state 88

  ! SEMICOLOM       [ reduce using rule 35 (Assignment -> Logic_or .) ]


state 147

    (31) WhileStmt -> WHILE OPP Expression CLP . Statement
    (16) Statement -> . ExprStmt
    (17) Statement -> . WhileStmt
    (18) Statement -> . IfStmt
    (19) Statement -> . PrintStmt
    (20) Statement -> . ReturnStmt
    (21) Statement -> . Block
    (25) ExprStmt -> . Expression SEMICOLOM
    (31) WhileStmt -> . WHILE OPP Expression CLP Statement
    (26) IfStmt -> . IF OPP Expression CLP Statement Else_aster
    (29) PrintStmt -> . PRINT Expression SEMICOLOM
    (30) ReturnStmt -> . RETURN Expression SEMICOLOM
    (22) Block -> . OKEY Declaration_aster CKEY
    (32) Expression -> . Assignment
    (33) Assignment -> . ID EQ Logic_or
    (34) Assignment -> . Type_ ID EQ Logic_or
    (35) Assignment -> . Logic_or
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    WHILE           shift and go to state 47
    IF              shift and go to state 48
    PRINT           shift and go to state 49
    RETURN          shift and go to state 50
    OKEY            shift and go to state 51
    ID              shift and go to state 36
    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67

    Expression                     shift and go to state 37
    Statement                      shift and go to state 162
    ExprStmt                       shift and go to state 38
    WhileStmt                      shift and go to state 39
    IfStmt                         shift and go to state 40
    PrintStmt                      shift and go to state 41
    ReturnStmt                     shift and go to state 42
    Block                          shift and go to state 43
    Assignment                     shift and go to state 52
    Logic_or                       shift and go to state 53
    Type_                          shift and go to state 85
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 148

    (26) IfStmt -> IF OPP Expression CLP . Statement Else_aster
    (16) Statement -> . ExprStmt
    (17) Statement -> . WhileStmt
    (18) Statement -> . IfStmt
    (19) Statement -> . PrintStmt
    (20) Statement -> . ReturnStmt
    (21) Statement -> . Block
    (25) ExprStmt -> . Expression SEMICOLOM
    (31) WhileStmt -> . WHILE OPP Expression CLP Statement
    (26) IfStmt -> . IF OPP Expression CLP Statement Else_aster
    (29) PrintStmt -> . PRINT Expression SEMICOLOM
    (30) ReturnStmt -> . RETURN Expression SEMICOLOM
    (22) Block -> . OKEY Declaration_aster CKEY
    (32) Expression -> . Assignment
    (33) Assignment -> . ID EQ Logic_or
    (34) Assignment -> . Type_ ID EQ Logic_or
    (35) Assignment -> . Logic_or
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    WHILE           shift and go to state 47
    IF              shift and go to state 48
    PRINT           shift and go to state 49
    RETURN          shift and go to state 50
    OKEY            shift and go to state 51
    ID              shift and go to state 36
    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67

    Expression                     shift and go to state 37
    Statement                      shift and go to state 163
    ExprStmt                       shift and go to state 38
    WhileStmt                      shift and go to state 39
    IfStmt                         shift and go to state 40
    PrintStmt                      shift and go to state 41
    ReturnStmt                     shift and go to state 42
    Block                          shift and go to state 43
    Assignment                     shift and go to state 52
    Logic_or                       shift and go to state 53
    Type_                          shift and go to state 85
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 149

    (34) Assignment -> Type_ ID EQ . Logic_or
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67
    ID              shift and go to state 99

    Logic_or                       shift and go to state 164
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 150

    (57) Call -> Primary OPP Arguments CLP .

    STAR            reduce using rule 57 (Call -> Primary OPP Arguments CLP .)
    DIV             reduce using rule 57 (Call -> Primary OPP Arguments CLP .)
    MINUS           reduce using rule 57 (Call -> Primary OPP Arguments CLP .)
    PLUS            reduce using rule 57 (Call -> Primary OPP Arguments CLP .)
    GT              reduce using rule 57 (Call -> Primary OPP Arguments CLP .)
    LT              reduce using rule 57 (Call -> Primary OPP Arguments CLP .)
    LTE             reduce using rule 57 (Call -> Primary OPP Arguments CLP .)
    GTE             reduce using rule 57 (Call -> Primary OPP Arguments CLP .)
    NOTEQ           reduce using rule 57 (Call -> Primary OPP Arguments CLP .)
    EQEQ            reduce using rule 57 (Call -> Primary OPP Arguments CLP .)
    AND             reduce using rule 57 (Call -> Primary OPP Arguments CLP .)
    OR              reduce using rule 57 (Call -> Primary OPP Arguments CLP .)
    SEMICOLOM       reduce using rule 57 (Call -> Primary OPP Arguments CLP .)
    CLP             reduce using rule 57 (Call -> Primary OPP Arguments CLP .)
    COMMA           reduce using rule 57 (Call -> Primary OPP Arguments CLP .)


state 151

    (65) Arguments -> Expression Expression_aster .

    CLP             reduce using rule 65 (Arguments -> Expression Expression_aster .)


state 152

    (66) Expression_aster -> COMMA . Expression Expression_aster
    (32) Expression -> . Assignment
    (33) Assignment -> . ID EQ Logic_or
    (34) Assignment -> . Type_ ID EQ Logic_or
    (35) Assignment -> . Logic_or
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    ID              shift and go to state 36
    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67

    Expression                     shift and go to state 165
    Assignment                     shift and go to state 52
    Logic_or                       shift and go to state 53
    Type_                          shift and go to state 85
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 153

    (67) Expression_aster -> empty .

    CLP             reduce using rule 67 (Expression_aster -> empty .)


state 154

    (7) A -> LT ARMY GT ArmyDetail LT DIV ARMY GT .

    LT              reduce using rule 7 (A -> LT ARMY GT ArmyDetail LT DIV ARMY GT .)
    ROUNDS          reduce using rule 7 (A -> LT ARMY GT ArmyDetail LT DIV ARMY GT .)


state 155

    (8) ArmyDetail -> ARMY_name EQ NUMERIC SEMICOLOM ArmyDetail .

    LT              reduce using rule 8 (ArmyDetail -> ARMY_name EQ NUMERIC SEMICOLOM ArmyDetail .)


state 156

    (9) ArmyDetail -> AMOUNT EQ NUMERIC SEMICOLOM ArmyDetail .

    LT              reduce using rule 9 (ArmyDetail -> AMOUNT EQ NUMERIC SEMICOLOM ArmyDetail .)


state 157

    (1) Simulation -> LT SIMULATION GT M A A R Program LT DIV SIMULATION GT .

    $end            reduce using rule 1 (Simulation -> LT SIMULATION GT M A A R Program LT DIV SIMULATION GT .)


state 158

    (70) Params -> Type_ . ID ParamsAster

    ID              shift and go to state 166


state 159

    (69) Function -> Type_ ID OPP Params . CLP Block

    CLP             shift and go to state 167


state 160

    (71) Params -> empty .

    CLP             reduce using rule 71 (Params -> empty .)
    COMMA           reduce using rule 71 (Params -> empty .)


state 161

    (15) VarDecl -> Type_ ID EQ Expression SEMICOLOM .

    FUNC            reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    INT             reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    BOOL            reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    VOID            reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    WHILE           reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    IF              reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    PRINT           reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    RETURN          reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    OKEY            reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    ID              reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    NOT             reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    MINUS           reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    TRUE            reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    FALSE           reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    NUMERIC         reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    NIL             reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    LT              reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)
    CKEY            reduce using rule 15 (VarDecl -> Type_ ID EQ Expression SEMICOLOM .)


state 162

    (31) WhileStmt -> WHILE OPP Expression CLP Statement .

    FUNC            reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    INT             reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    BOOL            reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    VOID            reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    WHILE           reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    IF              reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    PRINT           reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    RETURN          reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    OKEY            reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    ID              reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    NOT             reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    MINUS           reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    TRUE            reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    FALSE           reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    NUMERIC         reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    NIL             reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    LT              reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    CKEY            reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)
    ELSE            reduce using rule 31 (WhileStmt -> WHILE OPP Expression CLP Statement .)


state 163

    (26) IfStmt -> IF OPP Expression CLP Statement . Else_aster
    (27) Else_aster -> . ELSE Statement
    (28) Else_aster -> . empty
    (77) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 169
    FUNC            reduce using rule 77 (empty -> .)
    INT             reduce using rule 77 (empty -> .)
    BOOL            reduce using rule 77 (empty -> .)
    VOID            reduce using rule 77 (empty -> .)
    WHILE           reduce using rule 77 (empty -> .)
    IF              reduce using rule 77 (empty -> .)
    PRINT           reduce using rule 77 (empty -> .)
    RETURN          reduce using rule 77 (empty -> .)
    OKEY            reduce using rule 77 (empty -> .)
    ID              reduce using rule 77 (empty -> .)
    NOT             reduce using rule 77 (empty -> .)
    MINUS           reduce using rule 77 (empty -> .)
    TRUE            reduce using rule 77 (empty -> .)
    FALSE           reduce using rule 77 (empty -> .)
    NUMERIC         reduce using rule 77 (empty -> .)
    NIL             reduce using rule 77 (empty -> .)
    LT              reduce using rule 77 (empty -> .)
    CKEY            reduce using rule 77 (empty -> .)

  ! ELSE            [ reduce using rule 77 (empty -> .) ]

    Else_aster                     shift and go to state 168
    empty                          shift and go to state 170

state 164

    (34) Assignment -> Type_ ID EQ Logic_or .
    (36) Logic_or -> Logic_or . OR Logic_and

    SEMICOLOM       reduce using rule 34 (Assignment -> Type_ ID EQ Logic_or .)
    CLP             reduce using rule 34 (Assignment -> Type_ ID EQ Logic_or .)
    COMMA           reduce using rule 34 (Assignment -> Type_ ID EQ Logic_or .)
    OR              shift and go to state 88


state 165

    (66) Expression_aster -> COMMA Expression . Expression_aster
    (66) Expression_aster -> . COMMA Expression Expression_aster
    (67) Expression_aster -> . empty
    (77) empty -> .

    COMMA           shift and go to state 152
    CLP             reduce using rule 77 (empty -> .)

    Expression_aster               shift and go to state 171
    empty                          shift and go to state 153

state 166

    (70) Params -> Type_ ID . ParamsAster
    (72) ParamsAster -> . COMMA Params ParamsAster
    (73) ParamsAster -> . empty
    (77) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 173
    CLP             reduce using rule 77 (empty -> .)

  ! COMMA           [ reduce using rule 77 (empty -> .) ]

    ParamsAster                    shift and go to state 172
    empty                          shift and go to state 174

state 167

    (69) Function -> Type_ ID OPP Params CLP . Block
    (22) Block -> . OKEY Declaration_aster CKEY

    OKEY            shift and go to state 51

    Block                          shift and go to state 175

state 168

    (26) IfStmt -> IF OPP Expression CLP Statement Else_aster .

    FUNC            reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    INT             reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    BOOL            reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    VOID            reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    WHILE           reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    IF              reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    PRINT           reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    RETURN          reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    OKEY            reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    ID              reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    NOT             reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    MINUS           reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    TRUE            reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    FALSE           reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    NUMERIC         reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    NIL             reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    LT              reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    CKEY            reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)
    ELSE            reduce using rule 26 (IfStmt -> IF OPP Expression CLP Statement Else_aster .)


state 169

    (27) Else_aster -> ELSE . Statement
    (16) Statement -> . ExprStmt
    (17) Statement -> . WhileStmt
    (18) Statement -> . IfStmt
    (19) Statement -> . PrintStmt
    (20) Statement -> . ReturnStmt
    (21) Statement -> . Block
    (25) ExprStmt -> . Expression SEMICOLOM
    (31) WhileStmt -> . WHILE OPP Expression CLP Statement
    (26) IfStmt -> . IF OPP Expression CLP Statement Else_aster
    (29) PrintStmt -> . PRINT Expression SEMICOLOM
    (30) ReturnStmt -> . RETURN Expression SEMICOLOM
    (22) Block -> . OKEY Declaration_aster CKEY
    (32) Expression -> . Assignment
    (33) Assignment -> . ID EQ Logic_or
    (34) Assignment -> . Type_ ID EQ Logic_or
    (35) Assignment -> . Logic_or
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (36) Logic_or -> . Logic_or OR Logic_and
    (37) Logic_or -> . Logic_and
    (38) Logic_and -> . Logic_and AND Equality
    (39) Logic_and -> . Equality
    (40) Equality -> . Equality NOTEQ Comparison
    (41) Equality -> . Equality EQEQ Comparison
    (42) Equality -> . Comparison
    (43) Comparison -> . Comparison GT Term
    (44) Comparison -> . Comparison LT Term
    (45) Comparison -> . Comparison LTE Term
    (46) Comparison -> . Comparison GTE Term
    (47) Comparison -> . Term
    (48) Term -> . Term MINUS Factor
    (49) Term -> . Term PLUS Factor
    (50) Term -> . Factor
    (51) Factor -> . Factor STAR Unary
    (52) Factor -> . Factor DIV Unary
    (53) Factor -> . Unary
    (54) Unary -> . NOT Unary
    (55) Unary -> . MINUS Unary
    (56) Unary -> . Call
    (57) Call -> . Primary OPP Arguments CLP
    (58) Call -> . Primary
    (60) Primary -> . TRUE
    (61) Primary -> . FALSE
    (62) Primary -> . NUMERIC
    (63) Primary -> . NIL
    (64) Primary -> . ID

    WHILE           shift and go to state 47
    IF              shift and go to state 48
    PRINT           shift and go to state 49
    RETURN          shift and go to state 50
    OKEY            shift and go to state 51
    ID              shift and go to state 36
    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    NOT             shift and go to state 61
    MINUS           shift and go to state 58
    TRUE            shift and go to state 64
    FALSE           shift and go to state 65
    NUMERIC         shift and go to state 66
    NIL             shift and go to state 67

    Statement                      shift and go to state 176
    ExprStmt                       shift and go to state 38
    WhileStmt                      shift and go to state 39
    IfStmt                         shift and go to state 40
    PrintStmt                      shift and go to state 41
    ReturnStmt                     shift and go to state 42
    Block                          shift and go to state 43
    Expression                     shift and go to state 37
    Assignment                     shift and go to state 52
    Logic_or                       shift and go to state 53
    Type_                          shift and go to state 85
    Logic_and                      shift and go to state 54
    Equality                       shift and go to state 55
    Comparison                     shift and go to state 56
    Term                           shift and go to state 57
    Factor                         shift and go to state 59
    Unary                          shift and go to state 60
    Call                           shift and go to state 62
    Primary                        shift and go to state 63

state 170

    (28) Else_aster -> empty .

    FUNC            reduce using rule 28 (Else_aster -> empty .)
    INT             reduce using rule 28 (Else_aster -> empty .)
    BOOL            reduce using rule 28 (Else_aster -> empty .)
    VOID            reduce using rule 28 (Else_aster -> empty .)
    WHILE           reduce using rule 28 (Else_aster -> empty .)
    IF              reduce using rule 28 (Else_aster -> empty .)
    PRINT           reduce using rule 28 (Else_aster -> empty .)
    RETURN          reduce using rule 28 (Else_aster -> empty .)
    OKEY            reduce using rule 28 (Else_aster -> empty .)
    ID              reduce using rule 28 (Else_aster -> empty .)
    NOT             reduce using rule 28 (Else_aster -> empty .)
    MINUS           reduce using rule 28 (Else_aster -> empty .)
    TRUE            reduce using rule 28 (Else_aster -> empty .)
    FALSE           reduce using rule 28 (Else_aster -> empty .)
    NUMERIC         reduce using rule 28 (Else_aster -> empty .)
    NIL             reduce using rule 28 (Else_aster -> empty .)
    LT              reduce using rule 28 (Else_aster -> empty .)
    CKEY            reduce using rule 28 (Else_aster -> empty .)
    ELSE            reduce using rule 28 (Else_aster -> empty .)


state 171

    (66) Expression_aster -> COMMA Expression Expression_aster .

    CLP             reduce using rule 66 (Expression_aster -> COMMA Expression Expression_aster .)


state 172

    (70) Params -> Type_ ID ParamsAster .

    CLP             reduce using rule 70 (Params -> Type_ ID ParamsAster .)
    COMMA           reduce using rule 70 (Params -> Type_ ID ParamsAster .)


state 173

    (72) ParamsAster -> COMMA . Params ParamsAster
    (70) Params -> . Type_ ID ParamsAster
    (71) Params -> . empty
    (74) Type_ -> . INT
    (75) Type_ -> . BOOL
    (76) Type_ -> . VOID
    (77) empty -> .

    INT             shift and go to state 44
    BOOL            shift and go to state 45
    VOID            shift and go to state 46
    CLP             reduce using rule 77 (empty -> .)
    COMMA           reduce using rule 77 (empty -> .)

    Params                         shift and go to state 177
    Type_                          shift and go to state 158
    empty                          shift and go to state 160

state 174

    (73) ParamsAster -> empty .

    CLP             reduce using rule 73 (ParamsAster -> empty .)
    COMMA           reduce using rule 73 (ParamsAster -> empty .)


state 175

    (69) Function -> Type_ ID OPP Params CLP Block .

    FUNC            reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    INT             reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    BOOL            reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    VOID            reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    WHILE           reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    IF              reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    PRINT           reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    RETURN          reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    OKEY            reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    ID              reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    NOT             reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    MINUS           reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    TRUE            reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    FALSE           reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    NUMERIC         reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    NIL             reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    LT              reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)
    CKEY            reduce using rule 69 (Function -> Type_ ID OPP Params CLP Block .)


state 176

    (27) Else_aster -> ELSE Statement .

    FUNC            reduce using rule 27 (Else_aster -> ELSE Statement .)
    INT             reduce using rule 27 (Else_aster -> ELSE Statement .)
    BOOL            reduce using rule 27 (Else_aster -> ELSE Statement .)
    VOID            reduce using rule 27 (Else_aster -> ELSE Statement .)
    WHILE           reduce using rule 27 (Else_aster -> ELSE Statement .)
    IF              reduce using rule 27 (Else_aster -> ELSE Statement .)
    PRINT           reduce using rule 27 (Else_aster -> ELSE Statement .)
    RETURN          reduce using rule 27 (Else_aster -> ELSE Statement .)
    OKEY            reduce using rule 27 (Else_aster -> ELSE Statement .)
    ID              reduce using rule 27 (Else_aster -> ELSE Statement .)
    NOT             reduce using rule 27 (Else_aster -> ELSE Statement .)
    MINUS           reduce using rule 27 (Else_aster -> ELSE Statement .)
    TRUE            reduce using rule 27 (Else_aster -> ELSE Statement .)
    FALSE           reduce using rule 27 (Else_aster -> ELSE Statement .)
    NUMERIC         reduce using rule 27 (Else_aster -> ELSE Statement .)
    NIL             reduce using rule 27 (Else_aster -> ELSE Statement .)
    LT              reduce using rule 27 (Else_aster -> ELSE Statement .)
    CKEY            reduce using rule 27 (Else_aster -> ELSE Statement .)
    ELSE            reduce using rule 27 (Else_aster -> ELSE Statement .)


state 177

    (72) ParamsAster -> COMMA Params . ParamsAster
    (72) ParamsAster -> . COMMA Params ParamsAster
    (73) ParamsAster -> . empty
    (77) empty -> .

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 173
    CLP             reduce using rule 77 (empty -> .)

  ! COMMA           [ reduce using rule 77 (empty -> .) ]

    ParamsAster                    shift and go to state 178
    empty                          shift and go to state 174

state 178

    (72) ParamsAster -> COMMA Params ParamsAster .

    CLP             reduce using rule 72 (ParamsAster -> COMMA Params ParamsAster .)
    COMMA           reduce using rule 72 (ParamsAster -> COMMA Params ParamsAster .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 163 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 166 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 177 resolved as shift
WARNING: reduce/reduce conflict in state 146 resolved using rule (Assignment -> Type_ ID EQ Logic_or)
WARNING: rejected rule (Assignment -> Logic_or) in state 146
